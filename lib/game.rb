require 'pry'

#TO DO : la classe a plusieurs attr_accessor: le current_player (√©gal √† un objet Player)
#, le status (en cours, nul ou un objet Player s'il gagne), le Board et un array contenant
# les 2 joueurs.
class Game
  attr_accessor :board, :arr_player, :current_player


  def initialize(player1_name,player2_name)
  #TO DO : cr√©√© 2 joueurs, cr√©√© un board, met le status √† "on going", d√©fini un 
  
    @arr_player = []
    @arr_player <<  Player.new(player1_name,"X")
    @arr_player <<  Player.new(player2_name,"O")
    @board = Board.new
    @current_player = arr_player[0]
  
  end

 

  def turn
    #TO DO : m√©thode faisant appelle aux m√©thodes des autres classes (notamment √† 
    # l'instance de Board). Elle affiche le plateau, demande au joueur ce qu'il 
    # joue, v√©rifie si un joueur a gagn√©, passe au joueur suivant si la partie 
    # n'est pas finie.
    the_board = Show.new.show_board(@board) # affiche le plateau
    
    @board.play_turn(@current_player) # erreur ici ?
    is_victory = @board.victory?
    if @board.victory? == false
      if @current_player == arr_player[0] # si on est player0 on passe au player1 sinon on passe au 0
        @current_player = arr_player[1]
      else
        @current_player = arr_player[0]
      end
    end
    return is_victory

  end


    

  def game_end
    
    # TO DO : permet l'affichage de fin de partie quand un vainqueur est d√©tect√© ou 
    #si il y a match nul

    if board.full? && board.victory? == false   
      puts "----- Partie termin√©e... comme personne n'a gagn√© le D√©mon a d√©vor√© votre √¢me √† tous les deux üòà !"
    else
      puts "----- Bravo tu as gagn√© #{current_player.name} ! L'√¢me de ton adversaire est d√©vor√©e par le d√©mon ! üòà---- "
    end
    
  end
        
  
end

